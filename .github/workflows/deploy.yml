name: Vercel Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  push:
    branches:
      - main
      - master
jobs:
  Deploy-Production:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

# Steps

# The steps define the sequential tasks executed as part of the job:


# Step 1: Checkout Code
# - uses: actions/checkout@v2
# Uses the GitHub Action actions/checkout@v2 to pull the repository code into the virtual machine.

# Step 2: Install Vercel CLI
# - name: Install Vercel CLI
#   run: npm install --global vercel@latest
# Installs the latest version of the Vercel CLI globally using npm. This CLI tool is used for managing Vercel deployments programmatically.

# Step 3: Pull Vercel Environment Information
# - name: Pull Vercel Environment Information
#   run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
# Syncs the local environment with the Vercel environment for the production environment.
# Token: Uses the secure VERCEL_TOKEN secret to authenticate with Vercel.

# Step 4: Build Project Artifacts
# - name: Build Project Artifacts
#   run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
# Builds the project locally using the vercel build command. This step compiles the project for production deployment.

# Step 5: Deploy Project Artifacts
# - name: Deploy Project Artifacts to Vercel
#   run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
# Deploys the prebuilt project artifacts to Vercel using the vercel deploy command with the --prebuilt and --prod flags:
# --prebuilt: Skips the build step during deployment since the build was already completed locally.
# --prod: Deploys to the production environment.